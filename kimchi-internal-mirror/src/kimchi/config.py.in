#
# Project Kimchi
#
# Copyright IBM, Corp. 2013-2015
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
#

import libvirt
import os
import platform
import threading


from ConfigParser import SafeConfigParser


from kimchi.xmlutils.utils import xpath_get_text

__version__ = "@kimchiversion@"
__release__ = "@kimchirelease@"
__with_spice__ = "@withspice@"

DEFAULT_LOG_LEVEL = "debug"

kimchiLock = threading.Lock()

# Storage pool constant for read-only pool types
READONLY_POOL_TYPE = ['iscsi', 'scsi', 'mpath']


def get_object_store():
    return os.path.join(paths.state_dir, 'objectstore')


def get_distros_store():
    return os.path.join(paths.conf_dir, 'distros.d')


def get_screenshot_path():
    return os.path.join(paths.state_dir, 'screenshots')


def get_debugreports_path():
    return os.path.join(paths.state_dir, 'debugreports')


def get_version():
    return "-".join([__version__, __release__])


def find_qemu_binary(find_emulator=False):
    try:
        connect = libvirt.open(None)
    except Exception, e:
        raise Exception("Unable to get qemu binary location: %s" % e)
    try:
        xml = connect.getCapabilities()

        # On Little Endian system, the qemu binary is
        # qemu-system-ppc64, not qemu-system-ppc64le as expected
        arch = platform.machine()
        if arch == "ppc64le":
            arch = "ppc64"

        if find_emulator:
            expr = "/capabilities/guest/arch[@name='%s']\
                    /emulator" % arch
        else:
            expr = "/capabilities/guest/arch[@name='%s']\
                    /domain[@type='kvm']/emulator" % arch
        res = xpath_get_text(xml, expr)
        location = res[0]
    except Exception, e:
        raise Exception("Unable to get qemu binary location: %s" % e)
    finally:
        connect.close()
    return location


class Paths(object):

    def __init__(self):
        self.prefix = self.get_prefix()
        self.installed = (self.prefix == '@pkgdatadir@')
        self.ui_dir = self.add_prefix('ui')
        self.spice_file = os.path.join(self.ui_dir,
                                       'spice-html5/pages/spice_auto.html')

        if __with_spice__ == 'yes':
            self.spice_dir = self.add_prefix('ui/spice-html5')
        elif os.path.exists('@datadir@/spice-html5'):
            self.spice_dir = '@datadir@/spice-html5'
        else:
            self.spice_dir = '/usr/share/spice-html5'

        if os.path.exists('@datadir@/novnc'):
            self.novnc_dir = '@datadir@/novnc'
        else:
            self.novnc_dir = '/usr/share/novnc'

        if self.installed:
            self.nginx_conf_dir = '@sysconfdir@/nginx/conf.d'
            self.state_dir = '@localstatedir@/lib/kimchi'
            self.log_dir = '@localstatedir@/log/kimchi'
            self.conf_dir = '@sysconfdir@/kimchi'
            self.src_dir = '@kimchidir@'
            self.plugins_dir = '@kimchidir@/plugins'
            self.mo_dir = '@prefix@/share/locale'
            self.spice_css_file = os.path.join(self.spice_dir, 'spice.css')
        else:
            self.nginx_conf_dir = self.add_prefix('src/nginx')
            self.state_dir = self.add_prefix('data')
            self.log_dir = self.add_prefix('log')
            self.conf_dir = self.add_prefix('src')
            self.src_dir = self.add_prefix('src/kimchi')
            self.plugins_dir = self.add_prefix('plugins')
            self.mo_dir = self.add_prefix('mo')
            self.spice_css_file = os.path.join(self.spice_dir, 'css/spice.css')

    def get_prefix(self):
        if __file__.startswith("/"):
            base = os.path.dirname(__file__)
        else:
            base = os.path.dirname('./%s' % __file__)

        if os.access('%s/../../src/kimchi/config.py' % base, os.F_OK):
            return os.path.abspath('%s/../..' % base)
        else:
            return '@pkgdatadir@'

    def add_prefix(self, subdir):
        return os.path.join(self.prefix, subdir)

    def get_template_path(self, resource):
        return os.path.join(self.ui_dir, 'pages/%s.tmpl' % resource)


paths = Paths()


class PluginPaths(Paths):

    def __init__(self, name):
        super(PluginPaths, self).__init__()
        self.plugin_dir = os.path.join('plugins', name)

        if self.installed:
            self.conf_dir = '@sysconfdir@/kimchi/plugins.d'
            self.src_dir = os.path.join('@kimchidir@', self.plugin_dir)
        else:
            self.conf_dir = self.add_prefix(self.plugin_dir)
            self.src_dir = self.add_prefix(self.plugin_dir)

        self.ui_dir = self.add_prefix(os.path.join(self.plugin_dir, 'ui'))
        self.mo_dir = self.add_prefix(os.path.join(self.plugin_dir, 'mo'))
        self.conf_file = os.path.join(self.conf_dir, '%s.conf' % name)


class UIConfig(dict):

    # expires is one year.
    CACHEEXPIRES = 31536000

    def __init__(self, paths):
        ui_configs = {}
        for sub_dir in ('css', 'js', 'libs', 'images'):
            ui_configs['/' + sub_dir] = {
                'tools.staticdir.on': True,
                'tools.staticdir.dir': os.path.join(paths.ui_dir, sub_dir),
                'tools.nocache.on': False}
            if sub_dir != 'images':
                ui_configs['/' + sub_dir].update({
                    'tools.expires.on': True,
                    'tools.expires.secs': self.CACHEEXPIRES})
        self.update(ui_configs)


class KimchiConfig(dict):
    # session time out is 10 minutes
    SESSIONSTIMEOUT = 10

    kimchi_config = {
        '/': {
            'tools.trailing_slash.on': False,
            'request.methods_with_bodies': ('POST', 'PUT'),
            'tools.nocache.on': True,
            'tools.proxy.on': True,
            'tools.sessions.on': True,
            'tools.sessions.name': 'kimchi',
            'tools.sessions.secure': True,
            'tools.sessions.httponly': True,
            'tools.sessions.locking': 'explicit',
            'tools.sessions.storage_type': 'ram',
            'tools.sessions.timeout': SESSIONSTIMEOUT,
            'tools.kimchiauth.on': False
        },
        '/novnc': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': paths.novnc_dir,
            'tools.nocache.on': True,
            'tools.kimchiauth.on': True
        },
        '/spice_auto.html': {
            'tools.staticfile.on': True,
            'tools.staticfile.filename': paths.spice_file,
            'tools.nocache.on': True,
            'tools.kimchiauth.on': True
        },
        '/spice-html5': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': paths.spice_dir,
            'tools.nocache.on': True
        },
        '/spice-html5/spice.css': {
            'tools.staticfile.on': True,
            'tools.staticfile.filename': paths.spice_css_file,
            'tools.nocache.on': True,
        },
        '/kimchi-ui.html': {
            'tools.kimchiauth.on': True
        },
        '/data/screenshots': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': get_screenshot_path(),
            'tools.nocache.on': False
        },
        '/data/debugreports': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': get_debugreports_path(),
            'tools.nocache.on': False,
            'tools.kimchiauth.on': True,
            'tools.staticdir.content_types': {'xz': 'application/x-xz'}
        },
        '/config/ui/tabs.xml': {
            'tools.staticfile.on': True,
            'tools.staticfile.filename': '%s/config/ui/tabs.xml' %
                                         paths.prefix,
            'tools.nocache.on': True
        },
        '/favicon.ico': {
            'tools.staticfile.on': True,
            'tools.staticfile.filename': '%s/images/logo.ico' % paths.ui_dir
        },
        '/robots.txt': {
            'tools.staticfile.on': True,
            'tools.staticfile.filename': '%s/robots.txt' % paths.ui_dir
        },
        '/help': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': '%s/ui/pages/help' % paths.prefix,
            'tools.staticdir.index': 'en_US/index.html',
            'tools.nocache.on': True
        }
    }

    def __init__(self):
        super(KimchiConfig, self).__init__(self)
        self.update(self.kimchi_config)
        self.update(UIConfig(paths))


class PluginConfig(dict):
    def __init__(self, plugin_name):
        super(PluginConfig, self).__init__(self)
        plugin_config = {
            '/ui/config/tab-ext.xml': {
                'tools.staticfile.on': True,
                'tools.staticfile.filename':
                os.path.join(PluginPaths(plugin_name).ui_dir,
                             'config/tab-ext.xml'),
                'tools.nocache.on': True}}
        self.update(plugin_config)
        self.update(UIConfig(PluginPaths(plugin_name)))


def _get_config():
    config = SafeConfigParser()
    config.add_section("server")
    config.set("server", "host", "0.0.0.0")
    config.set("server", "port", "8000")
    config.set("server", "ssl_port", "8001")
    config.set("server", "cherrypy_port", "8010")
    config.set("server", "ssl_cert", "")
    config.set("server", "ssl_key", "")
    config.set("server", "environment", "production")
    config.set("server", "federation", "off")
    config.set("server", "create_iso_pool", "true")
    config.set('server', 'max_body_size', '4*1024*1024')
    config.add_section("authentication")
    config.set("authentication", "method", "pam")
    config.set("authentication", "ldap_server", "")
    config.set("authentication", "ldap_search_base", "")
    config.set("authentication", "ldap_search_filter", "")
    config.set("authentication", "ldap_admin_id", "")
    config.add_section("logging")
    config.set("logging", "log_dir", paths.log_dir)
    config.set("logging", "log_level", DEFAULT_LOG_LEVEL)
    config.add_section("display")
    config.set("display", "display_proxy_port", "64667")

    config_file = os.path.join(paths.conf_dir, 'kimchi.conf')
    if os.path.exists(config_file):
        config.read(config_file)
    return config


config = _get_config()


if __name__ == '__main__':
    print paths.prefix
